/**
 * –ë–ª–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π
 */
const VK_BOT = require('node-vk-bot-api');
const CRON = require('node-cron');
const MOMENT = require('moment');
const {Configuration, OpenAIApi} = require('openai');

/**
 * –ë–ª–æ–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Moment
 */
MOMENT.locale('ru');

/**
 * –ë–ª–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç
 */
const PROD_CHAT_ID = 2000000004;
const DEV_CHAT_ID = 2000000003;
const TOKEN = 'vk1.a.W_e_xqnrJwDg-DYFxA9Gbmgbn-diyaYyEuL8I0dITwPGnKaTYrSFdW46e0CgQA_LPeuFAsoASp5RRaKkAGtWLwve3X3Pvdd3dWqGTDsdP0AEIs4u4L7sx6te-WCg2Len0ywK-zRBNWHPTGsSojFTPhs52BB1ghOMG11tcRqKeNchXugQuHu_mnVJrjFW2z-eqkiTgfja-KftVwmQsQDSfw';
const CHAT_ID = DEV_CHAT_ID;
const TRIGGER_TEXT = '[club210382674|@mutabor_action]';
const DEV_MODE = true;
const FIRST_MEET_PHOTOS = [
  'photo-210382674_457239317',
  'photo-210382674_457239141',
  'photo-210382674_457239143',
  'photo-210382674_457239363',
  'photo-210382674_457239206',
  'photo-210382674_457239234',
  'photo-210382674_457239251',
  'photo-210382674_457239352',
  'photo-210382674_457239364',
  'photo-210382674_457239375',
];

/**
 * –ë–ª–æ–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VK bot
 */
const BOT = new VK_BOT(TOKEN);

/**
 * –ë–ª–æ–∫ Open AI API (ChatGPT)
 */
const sendOpenAIAPI = async () => {
  const OPENAI_API_KEY = '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';
  const CONFIGURATION = new Configuration({
    apiKey: OPENAI_API_KEY,
  });
  const openai = new OpenAIApi(CONFIGURATION);
  const TEMPLATE = `–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –ø–æ —à–∞–±–ª–æ–Ω—É.
–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ: –°–µ–≥–æ–¥–Ω—è –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ! –°–µ–≥–æ–¥–Ω—è –≥–æ–¥–æ–≤—â–∏–Ω–∞! –†–æ–≤–Ω–æ ${parseYearText(YEARS_MF)} –Ω–∞–∑–∞–¥ –º—ã –≤—Å–µ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏ –ø–æ –∞–∫—Ç–µ—Ä—Å–∫–æ–º—É –º–∞—Å—Ç–µ—Ä—Å—Ç–≤—É! –ü–æ–¥ –ø—Ä–µ–¥–≤–æ–¥–∏—Ç–µ–ª—å—Å—Ç–≤–æ–º –Ω–µ–ø—Ä–µ–≤–∑–æ–π–¥–µ–Ω–Ω–æ–π –ê–Ω—Ç–æ–Ω–∏–Ω—ã –ì–µ—Ä–º–∞–Ω–æ–≤–Ω—ã! –£—Ä–∞! –£–†–ê! –£–†–ê–ê–ê!!!
–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ:`;

  try {
    const COMPLETION = await openai.createCompletion({
      model: 'text-davinci-003',
      prompt: TEMPLATE,
      temperature: 0.8,
      max_tokens: 1024,
    });
    return COMPLETION.data.choices[0].text;
  } catch (error) {
    // Consider adjusting the error handling logic for your use case
    if (error.response) {
      console.error(error.response.status, error.response.data);
      return `–°–µ–≥–æ–¥–Ω—è –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ! –í–µ–¥—å —Ä–æ–≤–Ω–æ ${parseYearText(YEARS_MF)} –Ω–∞–∑–∞–¥ –º—ã –≤—Å–µ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏ –ø–æ –∞–∫—Ç–µ—Ä—Å–∫–æ–º—É –º–∞—Å—Ç–µ—Ä—Å—Ç–≤—É! –ü–æ–¥ –ø—Ä–µ–¥–≤–æ–¥–∏—Ç–µ–ª—å—Å—Ç–≤–æ–º –Ω–µ–ø—Ä–µ–≤–∑–æ–π–¥–µ–Ω–Ω–æ–π –ê–Ω—Ç–æ–Ω–∏–Ω—ã –ì–µ—Ä–º–∞–Ω–æ–≤–Ω—ã! –£—Ä–∞! –£–†–ê! –£–†–ê–ê–ê!!!`;
    } else {
      console.error(`Error with OpenAI API request: ${error.message}`);
    }
  }
};

/**
 * –ë–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
 */
/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ
 * 1 –≥–æ–¥, 2 –≥–æ–¥–∞, 5 –ª–µ—Ç
 * 21 –≥–æ–¥, 22 –≥–æ–¥–∞, 25 –ª–µ—Ç
 * –∏ —Ç.–ø.
 * @param {number|string} years –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç
 * @return {string} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç —Å —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–º —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º
 */
const parseYearText = (years) => {
  if (years === 1) {
    return years + ' –≥–æ–¥';
  }
  if (years >= 2 && years < 5) {
    return years + ' –≥–æ–¥–∞';
  }
  if (years >= 5) {
    return years + ' –ª–µ—Ç';
  }
};

/**
 * –û—Ç–ø—Ä–∞–≤–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –±–æ—Ç–∞)
 */
const sendInfoMessage = async (ctx) => {
  const REPLY_TO_ID = ctx.message.peer_id;
  await BOT.sendMessage(REPLY_TO_ID, {
    random_id: Date.now(),
    message:
      `–ü—Ä–∏–≤–µ—Ç!
–ü–æ–∫–∞ —è –∑–Ω–∞—é —Ç–æ–ª—å–∫–æ —Ç–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:`,
    keyboard: JSON.stringify({
      inline: true,
      buttons: [
        [
          {
            action: {
              type: 'text',
              payload: {
                command: 'show_meet_time',
              },
              label: '–£–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–Ω–∞–∫–æ–º—ã',
            },
          },
        ],
        [
          {
            action: {
              type: 'open_app',
              app_id: 8044824,
              label: '–ú—É—Ç–∞–±–æ—Ä. –í—Å—è–∫–∏–π –¥–≤–∏–∂',
            },
          },
        ],
      ],
    }),
  });
};

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å "—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–Ω–∞–∫–æ–º—ã"
 */
const sendMeetTime = async () => {
  const CURRENT_DATE = MOMENT();
  const MUTABOR_FRIENDS = [2021, 1, 14, 15, 0];
  const MUTABOR_FRIENDS_DATE = MOMENT(MUTABOR_FRIENDS);
  const YEARS_MF = CURRENT_DATE.diff(MUTABOR_FRIENDS_DATE, 'years');
  MUTABOR_FRIENDS_DATE.add(YEARS_MF, 'years');
  const MONTHS_MF = CURRENT_DATE.diff(MUTABOR_FRIENDS_DATE, 'months');
  MUTABOR_FRIENDS_DATE.add(MONTHS_MF, 'months');
  const DAYS_MF = CURRENT_DATE.diff(MUTABOR_FRIENDS_DATE, 'days');
  MUTABOR_FRIENDS_DATE.add(DAYS_MF, 'days');
  const HOURS_MF = CURRENT_DATE.diff(MUTABOR_FRIENDS_DATE, 'hours');
  MUTABOR_FRIENDS_DATE.add(HOURS_MF, 'hours');
  const MINUTES_MF = CURRENT_DATE.diff(MUTABOR_FRIENDS_DATE, 'minutes');
  MUTABOR_FRIENDS_DATE.add(MINUTES_MF, 'minutes');

  return `–ó–Ω–∞–∫–æ–º—ã ${parseYearText(YEARS_MF)}, ${MONTHS_MF} –º–µ—Å, ${DAYS_MF} –¥, ${HOURS_MF} —á, ${MINUTES_MF} –º–∏–Ω, (—Å ${MOMENT(MUTABOR_FRIENDS).format('Do MMMM YYYY, kk:mm:ss')})`;
};

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –≥–æ–¥–æ–≤—â–∏–Ω–µ –ø–µ—Ä–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏
 */
const sendFirstMeetNotify = async () => {
  const MESSAGE = await sendOpenAIAPI();
  await BOT.sendMessage(CHAT_ID, {
    random_id: Date.now(),
    message: `${MESSAGE} üéà üéâ üéä\n(—Ç–µ–∫—Å—Ç –Ω–∞–ø–∏—Å–∞–Ω –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é)`,
    attachment: FIRST_MEET_PHOTOS,
  });
};

/**
 * –ë–ª–æ–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
 */
BOT.use(async (ctx, next) => {
  try {
    await next();
  } catch (e) {
    console.error(e);
  }
});

BOT.command('/start', sendInfoMessage);

BOT.command('/meet_time', async (ctx) => {
  const REPLY_TO_ID = ctx.message.peer_id;
  const MEET_TIME = await sendMeetTime();
  await BOT.sendMessage(REPLY_TO_ID, {
    random_id: Date.now(),
    message: MEET_TIME,
  });
});

BOT.event('message_new', async (ctx) => {
  const REPLY_TO_ID = ctx.message.peer_id;
  if (ctx.message.payload) {
    if (JSON.parse(ctx.message.payload)) {
      const PAYLOAD = JSON.parse(ctx.message.payload);
      if (PAYLOAD.command === 'show_meet_time') {
        const MEET_TIME = await sendMeetTime();
        await BOT.sendMessage(REPLY_TO_ID, {
          random_id: Date.now(),
          message: MEET_TIME,
        });
      }
    }
  }
  if (ctx.message.text === TRIGGER_TEXT) {
    await sendInfoMessage(ctx);
  }
});

BOT.startPolling((err) => {
  if (err) {
    console.error(err);
  }
});

/**
 * –ë–ª–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ CRON
 */
if (DEV_MODE) {
  CRON.schedule('* * * * *', sendFirstMeetNotify, {});
}
CRON.schedule('15 15 14 2 *', sendFirstMeetNotify, {});
