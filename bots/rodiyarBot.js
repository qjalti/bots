import {Telegraf} from 'telegraf';
import axios from 'axios';
import cron from 'node-cron';
import fs from 'fs';
import path from 'path';
import {fileURLToPath} from 'url';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º __dirname –≤ ES-–º–æ–¥—É–ª—è—Ö
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const STATUS_FILE = path.join(__dirname, 'statuses.json');

const BOT_TOKEN = process.env.RODIYAR_BOT_TOKEN;

const CHAT_IDS = [
  738829247,
  -4802395189,
];

const SITES = [
  {name: 'Patriot-CL.Ru', url: 'https://patriot-cl.ru/'},
  {name: 'Shvey-Dom.Ru', url: 'https://shvey-dom.ru/'},
  {name: 'RodiyarTech.Ru', url: 'https://rodiyartech.ru/'},
  {name: 'SNB.Group', url: 'https://snb.group/'},
  {name: 'Rodiyar.Tech', url: 'https://rodiyar.tech/'},
  {name: 'Ohrana-Objective.Ru', url: 'https://ohrana-objective.ru/'},
];

SITES.forEach((site) => {
  site.url = site.url.trim();
});

const BOT = new Telegraf(BOT_TOKEN);

BOT.use((ctx, next) => {
  if (ctx.message?.text) {
    const senderId = ctx.from?.id ?? 'unknown';
    const chatId = ctx.chat?.id ?? 'unknown';
    const username = ctx.from?.username ? `@${ctx.from.username}` : '';
    const fullName = ctx.from?.first_name || ctx.from?.last_name ?
      `${ctx.from.first_name || ''} ${ctx.from.last_name || ''}`.trim() :
      'no name';

    console.log(
        `[üì© –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ] –û—Ç: ID=${senderId} ${username} (${fullName}) | –ß–∞—Ç: ${chatId} | –¢–µ–∫—Å—Ç: "${ctx.message.text}"`,
    );
  }
  return next();
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
const loadStatuses = () => {
  if (!fs.existsSync(STATUS_FILE)) {
    const initial = {};
    SITES.forEach((site) => {
      initial[site.url] = true; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç
    });
    fs.writeFileSync(STATUS_FILE, JSON.stringify(initial, null, 2));
    return initial;
  }
  try {
    return JSON.parse(fs.readFileSync(STATUS_FILE, 'utf8'));
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è statuses.json, —Å–æ–∑–¥–∞—ë–º –∑–∞–Ω–æ–≤–æ');
    const initial = {};
    SITES.forEach((site) => initial[site.url] = true);
    fs.writeFileSync(STATUS_FILE, JSON.stringify(initial, null, 2));
    return initial;
  }
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Ñ–∞–π–ª
const saveStatuses = (statuses) => {
  fs.writeFileSync(STATUS_FILE, JSON.stringify(statuses, null, 2));
};

const getErrorDescription = (code) => {
  if (typeof code === 'number') {
    if (code >= 400 && code < 500) return '–æ—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ (4XX)';
    if (code >= 500 && code < 600) return '–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (5XX)';
    return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π HTTP-—Å—Ç–∞—Ç—É—Å';
  }

  switch (code) {
    case 'ECONNREFUSED':
      return '—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ';
    case 'ETIMEDOUT':
      return '—Ç–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
    case 'ENOTFOUND':
      return '–¥–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω';
    case 'EHOSTUNREACH':
      return '—Ö–æ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
    case 'ENETUNREACH':
      return '—Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
    case 'EAI_AGAIN':
      return '–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–±–æ–π DNS';
    case 'ERR_FR_TOO_MANY_REDIRECTS':
      return '—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π';
    case 'ERR_INVALID_URL':
      return '–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL';
    default:
      return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏';
  }
};

const checkSite = async (site) => {
  try {
    const response = await axios.head(site.url, {timeout: 10_000});
    const ok = response.status >= 200 && response.status < 400;
    return {...site, ok, status: response.status, error: null};
  } catch (error) {
    let statusCode = null;
    let errorCode = 'UNKNOWN';

    if (error.response?.status) {
      statusCode = error.response.status;
      errorCode = statusCode;
    } else if (error.code) {
      errorCode = error.code;
    }

    const description = getErrorDescription(errorCode);

    return {
      ...site,
      ok: false,
      status: statusCode,
      errorCode,
      description,
    };
  }
};

const monitorSites = async () => {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–æ–≤...');

  const statuses = loadStatuses();
  const results = await Promise.all(SITES.map(checkSite));
  let hasChanges = false;
  const sitesCounter = 0;

  for (const result of results) {
    const wasOk = statuses[result.url] === true;
    const nowOk = result.ok;

    if (wasOk && !nowOk) {
      // –°–∞–π—Ç —É–ø–∞–ª ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const link = `<a href="${result.url}">${result.name}</a>`;
      const code = result.status || result.errorCode;
      const message = `‚ö†Ô∏è –°–∞–π—Ç —É–ø–∞–ª!\n\n‚Äî ${link}: <b>${code}</b> ‚Äî ${result.description}`;
      for (const chatId of CHAT_IDS) {
        try {
          await BOT.telegram.sendMessage(chatId, message, {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
          });
          console.log(`üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–∞–¥–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`);
        } catch (err) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç ${chatId}:`, err.message);
        }
      }
      statuses[result.url] = false;
      hasChanges = true;
    } else if (!wasOk && nowOk) {
      // –°–∞–π—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
      const link = `<a href="${result.url}">${result.name}</a>`;
      const message = `‚úÖ –°–∞–π—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n‚Äî ${link} —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç.`;
      for (const chatId of CHAT_IDS) {
        try {
          await BOT.telegram.sendMessage(chatId, message, {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
          });
          console.log(`üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`);
        } catch (err) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç ${chatId}:`, err.message);
        }
      }
      statuses[result.url] = true;
      hasChanges = true;
    }
  }

  if (hasChanges) {
    saveStatuses(statuses);
  }
};

cron.schedule('*/5 * * * *', monitorSites);

monitorSites().catch(console.error);

BOT.launch().catch(console.error);

process.once('SIGINT', () => BOT.stop('SIGINT'));
process.once('SIGTERM', () => BOT.stop('SIGTERM'));
